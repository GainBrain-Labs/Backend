"""inital table schema
Revision ID: e6abd9e054e7
Revises: 
Create Date: 2025-06-22 02:32:21.420565
"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision: str = 'e6abd9e054e7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('compare',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('compare_type', sa.Enum('INTRA', 'INTER', name='comparetype'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('expression',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('expression', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('expression')
    )
    op.create_table('stock',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('ticker', sa.String(length=20), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_index(op.f('ix_stock_ticker'), 'stock', ['ticker'], unique=True)
    op.create_table('stock_group',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('ticker', sa.String(length=20), nullable=False),
    sa.Column('type', sa.String(length=20), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_stock_group_ticker'), 'stock_group', ['ticker'], unique=True)
    op.create_table('user',
    sa.Column('uuid', sa.UUID(), nullable=True),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('profile_pic', sa.String(), nullable=True),
    sa.Column('phone_number', sa.String(), nullable=True),
    sa.Column('dob', sa.Date(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('phone_number'),
    sa.UniqueConstraint('username')
    )
    op.create_table('custom_stock_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['stock_group.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('default_stock_group',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('stock_group_type', sa.Enum('NIFTY50', 'NIFTY100', 'NIFTY200', 'NIFTY500', name='defaultstockgrouptype'), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['stock_group.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('portfolio',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('stock_group_composition',
    sa.Column('stock_group_id', sa.Integer(), nullable=False),
    sa.Column('stock_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['stock_group_id'], ['stock_group.id'], ),
    sa.ForeignKeyConstraint(['stock_id'], ['stock.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('strategy',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('expression_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['expression_id'], ['expression.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('backtest',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('portfolio_id', sa.Integer(), nullable=False),
    sa.Column('strategy_id', sa.Integer(), nullable=False),
    sa.Column('initial_portfolio_value', sa.Float(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=False),
    sa.Column('status', sa.Enum('PROCESSING', 'COMPLETED', 'CANCELLED', 'FAILED', name='backtestprocessingstatus'), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolio.id'], ),
    sa.ForeignKeyConstraint(['strategy_id'], ['strategy.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('portfolio_composition',
    sa.Column('portfolio_id', sa.Integer(), nullable=False),
    sa.Column('stock_group_id', sa.Integer(), nullable=False),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolio.id'], ),
    sa.ForeignKeyConstraint(['stock_group_id'], ['stock_group.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('backtest_result',
    sa.Column('backtest_id', sa.Integer(), nullable=False),
    sa.Column('final_portfolio_value', sa.Float(), nullable=True),
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['backtest_id'], ['backtest.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('compare_backtest_composition',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('compare_id', sa.Integer(), nullable=False),
    sa.Column('backtest_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['backtest_id'], ['backtest.id'], ),
    sa.ForeignKeyConstraint(['compare_id'], ['compare.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('backtest_result_metrics',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sharpe_ratio', sa.Float(), nullable=True),
    sa.Column('max_drawdown', sa.Float(), nullable=True),
    sa.Column('final_return', sa.Float(), nullable=True),
    sa.Column('backtest_result_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['backtest_result_id'], ['backtest_result.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.drop_index('stock_timescale3_date_idx', table_name='stock_timescale3')
    op.drop_table('stock_timescale3')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('stock_timescale3',
    sa.Column('ticker', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('open_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('close_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('high_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('low_price', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('volume', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('ticker', 'date', name='stock_timescale3_pkey')
    )
    op.create_index('stock_timescale3_date_idx', 'stock_timescale3', [sa.literal_column('date DESC')], unique=False)
    op.drop_table('backtest_result_metrics')
    op.drop_table('compare_backtest_composition')
    op.drop_table('backtest_result')
    op.drop_table('portfolio_composition')
    op.drop_table('backtest')
    op.drop_table('strategy')
    op.drop_table('stock_group_composition')
    op.drop_table('portfolio')
    op.drop_table('default_stock_group')
    op.drop_table('custom_stock_group')
    op.drop_table('user')
    op.drop_index(op.f('ix_stock_group_ticker'), table_name='stock_group')
    op.drop_table('stock_group')
    op.drop_index(op.f('ix_stock_ticker'), table_name='stock')
    op.drop_table('stock')
    op.drop_table('expression')
    op.drop_table('compare')
    # ### end Alembic commands ###